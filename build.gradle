/*****************************************************************************
 * Project:  AndroidLogcatStdouts
 * Purpose:  Library for the redirection a stdouts
 *           from the native code to the Adroid's logcat.
 * Author:   NikitaFeodonit, nfeodonit@yandex.com
 *****************************************************************************
 *   Copyright (c) 2017 NikitaFeodonit
 *
 *    This file is part of the AndroidLogcatStdouts project.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published
 *    by the Free Software Foundation, either version 3 of the License,
 *    or (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *    See the GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program. If not, see <http://www.gnu.org/licenses/>.
 ****************************************************************************/

apply plugin: 'com.android.library'

android {
  compileSdkVersion 26
  buildToolsVersion "27.0.2"

  defaultConfig {
    minSdkVersion 14
    targetSdkVersion 26
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
// TODO: needed?
      jniDebuggable true
    }
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'com.android.support.test:runner:1.0.1'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

// native cmaked part

// useful links
// https://developer.android.com/studio/projects/add-native-code.html
// https://developer.android.com/ndk/guides/cmake.html#variables
// https://developer.android.com/ndk/guides/abis.html#sa

// Waiting for fix: https://code.google.com/p/android/issues/detail?id=52962

android {
// TODO: set from parent project
//  defaultPublishConfig "debug" // uncomment it for the debug of the native code
}

android {
// From Android Studio 2.2 Preview 6 (July 22, 2016) report:
// significantly improve build/deploy/debug cycle by only building the ABI
// that is needed for the target device or emulator.

// TODO: set from parent project
//  def cmAndroidAbis = ["armeabi", "armeabi-v7a", "x86", "mips", "arm64-v8a", "x86_64", "mips64"]
//  def cmAndroidAbis = ["armeabi-v7a", "arm64-v8a", "x86", "x86_64"]
//  def cmAndroidAbis = ["armeabi-v7a", "x86_64"] // for debug
//  def cmAndroidAbis = ["armeabi-v7a"] // for debug
//  def cmAndroidAbis = ["x86_64"] // for debug
  def cmAndroidAbis = ["x86"] // for debug
//  def String abiFiltersString = cmAndroidAbis.toString()
//  abiFiltersString = abiFiltersString.substring(1, abiFiltersString.length() - 1)

  defaultConfig {
    ndk {
      abiFilters = cmAndroidAbis // what ABIs gradle should package into one apk
    }

    externalNativeBuild {
      cmake {
        abiFilters = cmAndroidAbis // what ABIs gradle should build

//        targets "cmaketarget1", "cmaketarget2", "cmaketarget3" // TODO:

        arguments "-DSTUB_NOT_USED_CMAKE_VAR=OFF",

//            "-DCMAKE_VERBOSE_MAKEFILE=TRUE",

//            "-DANDROID_PLATFORM=android-9", // ${getNdkPlatformLevel(abi)}
// We could not specify ANDROID_PLATFORM:
// From Android Studio 2.2 Preview 5 (July 8, 2016) report:
// Enhanced logic for selecting platform version for ndk-build and CMake:
//  (1) get the set of ABIs based on compileSdkVersion.
//  (2) then for each of these ABIs we have decided to build for,
//      (a) if platforms/android-[min sdk]/arch-[ABI] exists,
//          then use the min sdk  as platform for that ABI.
//      (b) else if there exists platforms/android-[platform]/arch-[ABI] such that
//          platform < min sdk, use max(platform where platform < min sdk).
//      (c) else use min(platform where platforms/android-[platform]/arch-[ABI]  exists).

//            "-DANDROID_CPP_FEATURES=rtti exceptions",
//            "-DCMAKE_TOOLCHAIN_FILE=${projectDir}/...../android.toolchain.cmake",
//            "-GAndroid Gradle - Unix Makefiles",
//            "-DCMAKE_MAKE_PROGRAM=make",
//            "-DBUILD_SHARED_LIBS=ON",

//            "-DCXX_STANDARD=14",
//            "-DCXX_STANDARD_REQUIRED=ON",

//            "-DCMAKE_BUILD_TYPE=Release", // let's always release ${buildTypeName}

            // gcc
//            "-DANDROID_TOOLCHAIN=gcc",
//            "-DANDROID_STL=gnustl_static",

            // clang
            "-DANDROID_TOOLCHAIN=clang",
            "-DANDROID_STL=c++_static"
      }
    }
  }
  externalNativeBuild {
    cmake {
      path "${projectDir}/src/main/cpp/CMakeLists.txt"
      // https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.CmakeOptions.html
      buildStagingDirectory =
          "${rootDir}/build_android/build_native/${rootProject.name}/${project.name}"
    }
  }

// TODO:
//  androidAbis.each { androidAbi ->
//    task "cleanNative-${androidAbi}"(type: Exec) {
//      workingDir getWorkDir(androidAbi)
//      def cmakeCmd = "cmake --build . --target clean"
//      commandLine getShell(), getShellArg(), "${cmakeCmd}"
//    }
//  }
//  clean.dependsOn androidAbis.collect {
//    androidAbi -> "cleanNative-${androidAbi}"
//  }
}
